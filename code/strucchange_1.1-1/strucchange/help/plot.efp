plot.efp             package:strucchange             R Documentation

_P_l_o_t _E_m_p_i_r_i_c_a_l _F_l_u_c_t_u_a_t_i_o_n _P_r_o_c_e_s_s

_D_e_s_c_r_i_p_t_i_o_n:

     Plot and lines method for objects of class '"efp"'

_U_s_a_g_e:

     ## S3 method for class 'efp':
     plot(x, alpha = 0.05, alt.boundary = FALSE, boundary = TRUE,
         functional = "max", main = NULL,  ylim = NULL,
         ylab = "empirical fluctuation process", ...)
     ## S3 method for class 'efp':
     lines(x, functional = "max", ...)

_A_r_g_u_m_e_n_t_s:

       x: an object of class '"efp"'.

   alpha: numeric from interval (0,1) indicating the confidence level
          for which the boundary of the corresponding test will be
          computed.

alt.boundary: logical. If set to 'TRUE' alternative boundaries (instead
          of the standard linear boundaries) will be plotted (for CUSUM
          processes only).

boundary: logical. If set to 'FALSE' the boundary will be computed but
          not plotted.

functional: indicates which functional should be applied to the process
          before plotting and which boundaries should be used. If set
          to 'NULL' a multiple process with boundaries for the '"max"'
          functional is plotted. For more details see below.

main, ylim, ylab, ...: high-level 'plot' function parameters.

_D_e_t_a_i_l_s:

     Plots are available for the '"max"' functional for all process
     types. For Brownian bridge type processes the maximum or mean
     squared Euclidian norm ('"maxL2"' and '"meanL2"') can be used for
     aggregating before plotting. No plots are available for the
     '"range"' functional.

     Alternative boundaries that are proportional to the standard
     deviation of the corresponding limiting process are available for
     processes with Brownian motion or Brownian bridge limiting
     processes.

_V_a_l_u_e:

     'efp' returns an object of class '"efp"' which inherits from the
     class '"ts"' or '"mts"' respectively. The function 'plot' has a
     method to plot the empirical fluctuation process; with 'sctest'
     the corresponding test for structural change can be performed.

_R_e_f_e_r_e_n_c_e_s:

     Brown R.L., Durbin J., Evans J.M. (1975), Techniques for testing
     constancy of regression relationships over time, _Journal of the
     Royal Statistal Society_, B, *37*, 149-163.

     Chu C.-S., Hornik K., Kuan C.-M. (1995), MOSUM tests for parameter
     constancy, _Biometrika_, *82*, 603-617.

     Chu C.-S., Hornik K., Kuan C.-M. (1995), The moving-estimates test
     for parameter stability, _Econometric Theory_, *11*, 669-720.

     Krämer W., Ploberger W., Alt R. (1988), Testing for structural
     change in dynamic models, _Econometrica_, *56*, 1355-1369.

     Kuan C.-M., Hornik K. (1995), The generalized fluctuation test: A
     unifying view, _Econometric Reviews_, *14*, 135 - 161.

     Kuan C.-M., Chen (1994), Implementing the fluctuation and moving
     estimates tests in dynamic econometric models, _Economics
     Letters_, *44*, 235-239.

     Ploberger W., Krämer W. (1992), The CUSUM test with OLS residuals,
     _Econometrica_, *60*, 271-285.

     Zeileis A. (2000), p Values and Alternative Boundaries for CUSUM
     Tests, Working Paper 78, SFB "Adaptive Information Systems and
     Modelling in Economics and Management Science", Vienna University
     of Economics, <URL: http://www.wu-wien.ac.at/am/wp00.htm#78>.

_S_e_e _A_l_s_o:

     'efp', 'boundary.efp', 'sctest.efp'

_E_x_a_m_p_l_e_s:

     ## Load dataset "nhtemp" with average yearly temperatures in New Haven
     data(nhtemp)
     ## plot the data
     plot(nhtemp)

     ## test the model null hypothesis that the average temperature remains
     ## constant over the years
     ## compute Rec-CUSUM fluctuation process
     temp.cus <- efp(nhtemp ~ 1)
     ## plot the process
     plot(temp.cus, alpha = 0.01)
     ## and calculate the test statistic
     sctest(temp.cus)

     ## compute (recursive estimates) fluctuation process
     ## with an additional linear trend regressor
     lin.trend <- 1:60
     temp.me <- efp(nhtemp ~ lin.trend, type = "fluctuation")
     ## plot the bivariate process
     plot(temp.me, functional = NULL)
     ## and perform the corresponding test
     sctest(temp.me)

